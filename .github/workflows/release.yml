name: Release to Hex

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      changelog_entry:
        description: 'Changelog entry (what changed in this release)'
        required: true
        type: string

permissions:
  contents: write
  pull-requests: write

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27"
          elixir-version: "1.17"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-27-1.17-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-27-1.17-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Check formatting
        run: mix format --check-formatted

      - name: Compile with warnings as errors
        run: mix compile --warnings-as-errors

      - name: Run static analysis with Dialyzer
        run: mix dialyzer --format dialyxir

      - name: Run code analysis with Credo
        run: mix credo --all

      - name: Run documentation coverage with Doctor
        run: mix doctor --summary

      - name: Check for unused dependencies
        run: mix deps.unlock --check-unused

      - name: Audit dependencies for vulnerabilities
        run: mix hex.audit

      - name: Run security analysis
        run: mix sobelow --config

      - name: Run tests with coverage
        run: mix coveralls.github
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using tag version: $VERSION"
          else
            # Get current version from mix.exs for manual workflow
            CURRENT_VERSION=$(grep '@version' mix.exs | sed 's/.*@version "\(.*\)".*/\1/')
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "Using current version: $CURRENT_VERSION"
          fi

  release:
    name: Release to Hex
    runs-on: ubuntu-latest
    needs: quality-gates
    if: ${{ success() }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27"
          elixir-version: "1.17"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-27-1.17-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-27-1.17-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Handle version and changelog for manual releases
        if: github.event_name == 'workflow_dispatch'
        run: |
          CURRENT_VERSION=$(grep '@version' mix.exs | sed 's/.*@version "\(.*\)".*/\1/')
          BUMP_TYPE="${{ github.event.inputs.version_bump }}"
          
          # Parse current version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Calculate new version based on bump type
          case $BUMP_TYPE in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            "minor")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            "patch")
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$NEW_MAJOR.$NEW_MINOR.$NEW_PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Update version in mix.exs
          sed -i "s/@version \".*\"/@version \"$NEW_VERSION\"/" mix.exs
          echo "Updated mix.exs with version $NEW_VERSION"
          
          # Update CHANGELOG.md
          CHANGELOG_ENTRY="${{ github.event.inputs.changelog_entry }}"
          DATE=$(date +%Y-%m-%d)
          
          # Create temporary changelog with new entry
          {
            echo "# Changelog"
            echo ""
            echo "All notable changes to this project will be documented in this file."
            echo ""
            echo "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),"
            echo "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)."
            echo ""
            echo "## [Unreleased]"
            echo ""
            echo "### Added"
            echo "### Changed"
            echo "### Deprecated"
            echo "### Removed"
            echo "### Fixed"
            echo "### Security"
            echo ""
            echo "## [${NEW_VERSION}] - ${DATE}"
            echo ""
            echo "### Changed"
            echo "- ${CHANGELOG_ENTRY}"
            echo ""
            # Skip header and unreleased section from existing changelog
            sed -n '/^## \[/,$p' CHANGELOG.md
          } > temp_changelog.md
          
          mv temp_changelog.md CHANGELOG.md
          echo "Updated CHANGELOG.md"
          
          # Commit changes and create tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add mix.exs CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
          git push origin main
          git push origin --tags

      - name: Set release version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_type }}" == "tag" ]]; then
            # Extract version from tag (remove 'v' prefix)
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          else
            # Use the version we just updated
            echo "RELEASE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          fi

      - name: Generate documentation
        run: |
          mix docs
          echo "Generated documentation for version $RELEASE_VERSION"

      - name: Build package
        run: |
          mix hex.build
          echo "Package built successfully"

      - name: Publish to Hex
        run: |
          mix hex.publish --yes
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}

      - name: Extract changelog for release
        id: changelog
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            CHANGELOG_BODY="${{ github.event.inputs.changelog_entry }}"
          else
            # Extract changelog from the version section
            CHANGELOG_BODY=$(awk '/^## \['$RELEASE_VERSION'\]/,/^## \[/{if(/^## \['$RELEASE_VERSION'\]/) p=1; else if(/^## \[/ && p) exit; if(p && !/^## \['$RELEASE_VERSION'\]/) print}' CHANGELOG.md | sed '/^$/d')
          fi
          
          # Save to file for GitHub release
          cat > release_notes.md << EOF
          ## What's Changed
          ${CHANGELOG_BODY}
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.quality-gates.outputs.version }}...v${RELEASE_VERSION}
          
          ## Installation
          
          \`\`\`elixir
          def deps do
            [
              {:jido_signal, "~> ${RELEASE_VERSION}"}
            ]
          end
          \`\`\`
          EOF

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          body_path: release_notes.md
          draft: false
          prerelease: false

  deploy-docs:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [quality-gates, release]
    if: ${{ success() }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          otp-version: "27"
          elixir-version: "1.17"

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-27-1.17-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-27-1.17-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: mix deps.get

      - name: Deploy to HexDocs
        run: |
          mix hex.publish docs --yes
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
